// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoCallAPI.Data;

#nullable disable

namespace VideoCallAPI.Migrations
{
    [DbContext(typeof(VideoCallDbContext))]
    partial class VideoCallDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("VideoCallAPI.Models.CallHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("call_type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("caller_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int?>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("end_reason")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("end_time")
                        .HasColumnType("TEXT");

                    b.Property<int>("receiver_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("TEXT");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("caller_id");

                    b.HasIndex("receiver_id");

                    b.ToTable("CallHistories");
                });

            modelBuilder.Entity("VideoCallAPI.Models.ChatMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int?>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("file_path")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("file_size")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_read")
                        .HasColumnType("INTEGER");

                    b.Property<int>("receiver_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("sender_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("receiver_id", "sender_id", "timestamp");

                    b.HasIndex("sender_id", "receiver_id", "timestamp");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("VideoCallAPI.Models.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("added_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("contact_user_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("display_name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("is_blocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("last_message_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("unread_count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("contact_user_id");

                    b.HasIndex("user_id", "contact_user_id")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("VideoCallAPI.Models.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("created_by")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("max_participants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("room_code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("room_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("created_by");

                    b.HasIndex("room_code")
                        .IsUnique();

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("VideoCallAPI.Models.RoomParticipant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("joined_at")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("left_at")
                        .HasColumnType("TEXT");

                    b.Property<int>("room_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("user_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.HasIndex("room_id", "user_id", "is_active");

                    b.ToTable("RoomParticipants");
                });

            modelBuilder.Entity("VideoCallAPI.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("avatar_path")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("is_online")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("last_login_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("nickname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("VideoCallAPI.Models.CallHistory", b =>
                {
                    b.HasOne("VideoCallAPI.Models.User", "Caller")
                        .WithMany("InitiatedCalls")
                        .HasForeignKey("caller_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoCallAPI.Models.User", "receiver")
                        .WithMany("ReceivedCalls")
                        .HasForeignKey("receiver_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Caller");

                    b.Navigation("receiver");
                });

            modelBuilder.Entity("VideoCallAPI.Models.ChatMessage", b =>
                {
                    b.HasOne("VideoCallAPI.Models.User", "receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("receiver_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoCallAPI.Models.User", "sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("sender_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("receiver");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("VideoCallAPI.Models.Contact", b =>
                {
                    b.HasOne("VideoCallAPI.Models.User", "contact_user")
                        .WithMany("ContactedBy")
                        .HasForeignKey("contact_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoCallAPI.Models.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("contact_user");
                });

            modelBuilder.Entity("VideoCallAPI.Models.Room", b =>
                {
                    b.HasOne("VideoCallAPI.Models.User", "creator")
                        .WithMany()
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("creator");
                });

            modelBuilder.Entity("VideoCallAPI.Models.RoomParticipant", b =>
                {
                    b.HasOne("VideoCallAPI.Models.Room", "Room")
                        .WithMany("participants")
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoCallAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoCallAPI.Models.Room", b =>
                {
                    b.Navigation("participants");
                });

            modelBuilder.Entity("VideoCallAPI.Models.User", b =>
                {
                    b.Navigation("ContactedBy");

                    b.Navigation("Contacts");

                    b.Navigation("InitiatedCalls");

                    b.Navigation("ReceivedCalls");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
